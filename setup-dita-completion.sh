#!/bin/bash

# DITA-OT Completion Setup Script
# Generates and installs DITA-OT bash completion in one step

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS] [DITA_HOME_PATH]"
    echo ""
    echo "Generates and installs DITA-OT bash completion by scanning installed plugins."
    echo ""
    echo "Arguments:"
    echo "  DITA_HOME_PATH    Optional path to DITA-OT installation"
    echo ""
    echo "Options:"
    echo "  --generate-only   Generate completion script but don't install"
    echo "  --install-only    Install existing completion script (skip generation)"
    echo "  --system-wide     Install system-wide (requires sudo) instead of user-local"
    echo "  --help, -h        Show this help message"
    echo ""
    echo "DITA-OT Discovery:"
    echo "  1. Uses DITA_HOME environment variable if set"
    echo "  2. Uses command line argument if provided"
    echo "  3. Searches current directory and parent directories for DITA-OT installation"
    echo "     (looks for bin/dita and plugins/ directory)"
    echo ""
    echo "Examples:"
    echo "  # Auto-discovery with full setup:"
    echo "  $0"
    echo ""
    echo "  # With environment variable:"
    echo "  export DITA_HOME=/path/to/dita-ot"
    echo "  $0"
    echo ""
    echo "  # With command line argument:"
    echo "  $0 /path/to/dita-ot"
    echo ""
    echo "  # Generate only (no installation):"
    echo "  $0 --generate-only"
    echo ""
    echo "  # Install existing completion:"
    echo "  $0 --install-only"
    echo ""
    echo "  # System-wide installation:"
    echo "  $0 --system-wide"
}

# Function to discover DITA_HOME by searching up the directory tree
discover_dita_home() {
    local search_dir="$1"
    
    # Convert to absolute path
    search_dir="$(cd "$search_dir" 2>/dev/null && pwd)" || return 1
    
    # Search up the directory tree
    while [[ "$search_dir" != "/" && -n "$search_dir" ]]; do
        echo "  Checking: $search_dir" >&2
        
        # Check if this directory contains bin/dita and plugins/
        if [[ -f "$search_dir/bin/dita" && -d "$search_dir/plugins" ]]; then
            echo "$search_dir"
            return 0
        fi
        
        # Go up one level
        search_dir="$(dirname "$search_dir")"
    done
    
    return 1
}

# Function to generate completion script
generate_completion() {
    echo "üîç DITA-OT Completion Generator"
    echo "==============================="

    # Validate DITA-OT installation
    if [[ ! -f "$DITA_HOME/bin/dita" ]]; then
        echo "‚ùå Error: $DITA_HOME/bin/dita not found"
        echo "This doesn't appear to be a valid DITA-OT installation."
        exit 1
    fi

    if [[ ! -d "$DITA_HOME/plugins" ]]; then
        echo "‚ùå Error: $DITA_HOME/plugins directory not found"
        echo "This doesn't appear to be a valid DITA-OT installation."
        exit 1
    fi

    echo "‚úì DITA-OT: $DITA_HOME"
    echo "üìä Scanning for transtypes..."

    # Simple approach: find all transtype names at once
    ALL_TRANSTYPES=$(find "$DITA_HOME/plugins" -name "plugin.xml" -exec grep -h "transtype.*name=" {} \; 2>/dev/null | \
                     sed 's/.*name="\([^"]*\)".*/\1/' | \
                     sort -u | \
                     tr '\n' ' ')

    echo "Found transtypes: $ALL_TRANSTYPES"

    # Count plugins
    PLUGIN_COUNT=$(find "$DITA_HOME/plugins" -maxdepth 1 -type d | wc -l)
    PLUGIN_COUNT=$((PLUGIN_COUNT - 1))  # Subtract 1 for the plugins directory itself

    # Count transtypes for the message
    TRANSTYPE_COUNT=$(echo "$ALL_TRANSTYPES" | wc -w)

    # Generate completion script
    OUTPUT_SCRIPT="$SCRIPT_DIR/dita-completion.bash"

    cat > "$OUTPUT_SCRIPT" << EOF
#!/bin/bash

# DITA-OT Bash Completion
# Auto-generated by setup-dita-completion.sh
# DITA-OT: $DITA_HOME
# Generated: $(date)

_dita_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"
    
    # DITA-OT options
    local dita_opts="-f -i -o -t -D -v -h --help --version --input --output --format --temp --debug --verbose --clean-temp --force"
    
    # Auto-discovered transtypes
    local transtypes="$ALL_TRANSTYPES"
    
    # Basic completion logic
    case "\${prev}" in
        -f|--format|-t)
            COMPREPLY=( \$(compgen -W "\${transtypes}" -- \${cur}) )
            return 0
            ;;
        -i|--input)
            COMPREPLY=( \$(compgen -f -- \${cur} | grep -E '\.(dita|ditamap)$') )
            return 0
            ;;
        -o|--output)
            COMPREPLY=( \$(compgen -d -- \${cur}) )
            return 0
            ;;
        -D)
            # Property completion (basic)
            COMPREPLY=( \$(compgen -W "args.input= args.output= clean.temp= generate.copy.outer=" -- \${cur}) )
            return 0
            ;;
    esac
    
    # Default to dita options
    COMPREPLY=( \$(compgen -W "\${dita_opts}" -- \${cur}) )
}

# Register completion
complete -F _dita_completion dita

# Register completion for common relative paths
# Use -o filenames for file completion and -o nospace to prevent auto-completion
complete -o filenames -o nospace -F _dita_completion ../bin/dita
complete -o filenames -o nospace -F _dita_completion ./bin/dita
complete -o filenames -o nospace -F _dita_completion bin/dita
complete -o filenames -o nospace -F _dita_completion ./dita-wrapper.sh

# Try to register for any command ending in 'dita' (fallback)
# This uses bash's pattern matching for completion
for cmd in dita ../bin/dita ./bin/dita bin/dita ./dita-wrapper.sh; do
    complete -o filenames -o nospace -F _dita_completion "\$cmd" 2>/dev/null
done

# Info comment for debugging
echo "# DITA-OT completion loaded: $TRANSTYPE_COUNT transtypes from $PLUGIN_COUNT plugins"
EOF

    echo "‚úì Generated completion script: $(basename "$OUTPUT_SCRIPT")"
    echo "‚úì Discovered $TRANSTYPE_COUNT transtypes from $PLUGIN_COUNT plugins"
}

# Function to install completion script
install_completion() {
    echo ""
    echo "üîß Installing DITA-OT Completion"
    echo "================================="
    
    local completion_script="$SCRIPT_DIR/dita-completion.bash"
    
    if [[ ! -f "$completion_script" ]]; then
        echo "‚ùå Error: $completion_script not found"
        echo "Run with --generate-only first, or run without --install-only"
        exit 1
    fi

    # Determine completion directory
    local completion_dir
    local install_type="user"
    
    if [[ -n "$MINGW_PREFIX" ]] || [[ "$MSYSTEM" =~ ^MINGW ]]; then
        # Git for Windows / MSYS2
        if [[ -n "$MINGW_PREFIX" && -d "$MINGW_PREFIX/etc/bash_completion.d" ]]; then
            completion_dir="$MINGW_PREFIX/etc/bash_completion.d"
        elif [[ -d "/usr/share/bash-completion/completions" ]]; then
            completion_dir="/usr/share/bash-completion/completions"
        elif [[ -d "/etc/bash_completion.d" ]]; then
            completion_dir="/etc/bash_completion.d"
        else
            # Fallback to user directory for Git Bash
            completion_dir="$HOME/.local/share/bash-completion/completions"
            mkdir -p "$completion_dir"
        fi
        install_type="mingw"
    elif [[ "$INSTALL_SYSTEM_WIDE" == "true" ]]; then
        # System-wide installation requested
        if [[ -d "/usr/share/bash-completion/completions" ]]; then
            completion_dir="/usr/share/bash-completion/completions"
        elif [[ -d "/etc/bash_completion.d" ]]; then
            completion_dir="/etc/bash_completion.d"
        else
            echo "‚ùå Error: No system-wide completion directory found"
            echo "Try installing without --system-wide flag for user installation"
            exit 1
        fi
        install_type="system"
    else
        # User-local installation (modern standard)
        completion_dir="$HOME/.local/share/bash-completion/completions"
        mkdir -p "$completion_dir"
        install_type="user"
    fi

    echo "Source: $completion_script"
    echo "Target: $completion_dir/dita"
    echo "Type: $install_type installation"

    # Copy with appropriate permissions
    if [[ "$install_type" == "system" ]]; then
        if [[ -w "$completion_dir" ]]; then
            cp "$completion_script" "$completion_dir/dita"
            echo "‚úì Installed completion script (system-wide)"
        else
            echo "Need sudo for system-wide installation..."
            sudo cp "$completion_script" "$completion_dir/dita"
            echo "‚úì Installed completion script (system-wide with sudo)"
        fi
    else
        cp "$completion_script" "$completion_dir/dita"
        echo "‚úì Installed completion script (user-local)"
    fi
}

# Parse command line arguments
GENERATE_ONLY=false
INSTALL_ONLY=false
INSTALL_SYSTEM_WIDE=false
DITA_HOME_ARG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --generate-only)
            GENERATE_ONLY=true
            shift
            ;;
        --install-only)
            INSTALL_ONLY=true
            shift
            ;;
        --system-wide)
            INSTALL_SYSTEM_WIDE=true
            shift
            ;;
        --help|-h)
            show_usage
            exit 0
            ;;
        -*|--*)
            echo "Unknown option $1"
            show_usage
            exit 1
            ;;
        *)
            DITA_HOME_ARG="$1"
            shift
            ;;
    esac
done

# Handle install-only mode
if [[ "$INSTALL_ONLY" == true ]]; then
    install_completion
    echo ""
    echo "‚úÖ DITA-OT completion installed!"
    echo ""
    echo "To activate:"
    echo "  source ~/.bashrc"
    echo ""
    echo "Test it:"
    echo "  dita -f <TAB>"
    exit 0
fi

# Determine DITA_HOME (for generation)
if [[ -n "$DITA_HOME_ARG" ]]; then
    # Command line argument provided
    DITA_HOME="$DITA_HOME_ARG"
    echo "üéØ Using DITA_HOME from command line: $DITA_HOME"
elif [[ -n "$DITA_HOME" ]]; then
    # Environment variable set
    echo "üéØ Using DITA_HOME from environment: $DITA_HOME"
else
    # Auto-discovery
    echo "üîç DITA_HOME not set, searching for DITA-OT installation..."
    
    DITA_HOME=$(discover_dita_home "$SCRIPT_DIR")
    
    if [[ -n "$DITA_HOME" ]]; then
        echo "‚úì Found DITA-OT at: $DITA_HOME"
    else
        echo ""
        echo "‚ùå Error: Could not find DITA-OT installation"
        echo ""
        echo "Searched up the directory tree from: $SCRIPT_DIR"
        echo "Looking for directories containing both 'bin/dita' and 'plugins/' subdirectories."
        echo ""
        echo "Solutions:"
        echo "  1. Run this script from within a DITA-OT installation"
        echo "  2. Set DITA_HOME environment variable: export DITA_HOME=/path/to/dita-ot"
        echo "  3. Pass DITA-OT path as argument: $0 /path/to/dita-ot"
        echo ""
        show_usage
        exit 1
    fi
fi

# Generate completion script
generate_completion

# Install completion script (unless generate-only mode)
if [[ "$GENERATE_ONLY" == false ]]; then
    install_completion
    
    echo ""
    echo "üéâ DITA-OT completion setup complete!"
    echo ""
    echo "To activate:"
    echo "  source ~/.bashrc"
    echo ""
    echo "Test it:"
    echo "  dita -f <TAB>          # Shows all transtypes"
    echo "  dita -i <TAB>          # Shows DITA files"
    echo "  dita -o <TAB>          # Shows directories"
else
    echo ""
    echo "‚úì Generation complete (install skipped)"
    echo ""
    echo "To install:"
    echo "  $0 --install-only"
fi 